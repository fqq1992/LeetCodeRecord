鲸鱼小班：
    整体架构介绍；
    引入组件化的话题：Arouter/LiveData消息组建，接着讲怎么实现 优缺点 EventBus

    Rxjava的常用操作符；
    线程怎么到主线程；
    多线程，通信；

    List collection 主要方法；
    常见的实现List、Map、Set； ArrayList LinkList HashCode底层实现。
    equal 方法、HashCode关系，== 比的是地址。 hashCode的底层实现；





梧桐车联：
    AIDL, Client A conn Server B 的时候  A是 什么状态；返回bindle后 Server B 运行在什么线程里。
    怎么实现 A/B 两个异步接口合并数据的问题。
        rx merger. 手动实现，锁。或者用下述常见类。kotlin：measureTimeMillis

    线程常见工具类：
        CountDownLatch 齐射，等待多线程执行完后，执行自己。
        CyclicBarrier 屏障，传入参数N，等带N个线程阻塞后执行后续。可以传runnable优先执行。
        Semaphore 信号量， 同时支持N个线程并发共享资源。

    自定义View 图形混合。 setXfermode的 相关参数。 重叠部分的处理。

    多进程的优劣。


贵阳语聊：
    数组实现队列。
        参数表示起始下标 终止下标， 一定容量外的 抛异常。
    通用的文件下载框架。
        入口，URL、fileName、监听。
        下载引擎，判断本地是否存在、线程池加载，通过临时命名法解决异常情况下的文件问题，http content-Length校验文件是否完整。
        本地IO.


镁佳科技：
    3轮技术面均有手写算法之类。排序简单过一圈。
    除开常见问题：优化的问题点可以有， Linux进程 与 Android进程的区别。
    自定义ImageLoader框架。
        ImageLoader入口，
        ImageLoaderConfiguration通用配置：线程池/緩存大小/磁盤大小/日志
        DisplayImageOptions：单个图片的错误图 默认图等。

        上述对外接口。
        下面是流程。
        ImageLoader 入口
            ↓
        ImageEngine:分发任务到对应队列，
            ↓
        Cache  or Loader:获取具体数据 -->getData 区分 内存、磁盘、网络。
            ↓
        ImageDecoder：返回对应bitmap



雪球：
    Hr+三轮技术面.很奇怪的是第一轮是HR？之后等大概十几分钟后有人来，
    一面 主要是课程基础，数据接口 计算机网络之类的，Java线程安全/简历框架源码等；算法题，平衡树镜面。 思路 树的递归遍历 交换左右子节点。
    二面 主要是多线程 线程并发类；待优化的点 AQS　CAS等（PS:CAS本质是自旋锁或者说是乐观锁，AQS是独占锁的核心。）算法 字符串的处理。
    三面 应该是项目VP。主要是项目介绍以及工作内容的交换，设计模式以及算法题；
    再之后，VP让等HR 大约等十几分钟后有人要占用同一个会议室开会。
    教训：HR可能决定不了要你，但是HR可以决定不要谁。 呵



2019年11月14日 计划面试第四周，
    今日三家，心好累；跑断腿。

区块节点
    笔试3页纸，但好似没人看。
    一面 开始就比较奇怪。没有具体点 基本就是你熟悉什么设计模式 讲讲应用；你熟悉什么算法 讲讲使用场景；还有更什么的 你有没有什么技术改变生活的 自己的小项目或者小啥啥的
         开源的东西(神尼玛技术改变生活，只想说句艹。)。以及其他一些类似的东西；
    二面 相对具体一些 MVP/MVVM区别这类的，基本答完。还提醒入职申请表补充完整；再面完 接着是等人事。届时接近12点 十几分钟后 开始面人力。

    三面 人力资源 常规问题 离职原因，是否接受加班，996考核制(总计绩效3000)；KPI+工时 综合考量。
感觉人事面的细碎 很烦躁。出门12点半，奔赴下局。下午2点。路上就开始感觉 很无力，不知道在挣扎什么，在折腾什么；也许你
费劲巴拉的准备，绞尽脑汁的回答。也许在人那块只是趁机休息的机会。

必要商城
    首要印象 前台在一边边；登记 无笔试。邀约人很多 等待的几分钟时间里  已经见到5个人来等待参加面试。 后续一面得到消息 说是新融到一大笔钱 呵

    一面 问题：1、gradle的生命周期 、gradle在 编译APK的执行流程。
               2、网络这块 三次连接 四次挥手。怎么优化三次连接成为2次。
                  DNS怎么统计解析耗时.（Okhttp有暴露DNS解析接口，UrlConn反射）
               3、三方库原理层面，
                    Glide原理。
                    Lifecycle原理：LifecycleRegistry实现类。之后采用类似Glide的办法。具体参见 ReportFragment。在里面更新生命周期状态。
                    记忆深刻的点 “OKHTTP有什么缺点”神他么缺点，后面我反问；他说自己也不知道有啥缺点。
               4、设计模式 设计模式应用场景。而且简单的不要。
               5、上来就问有没有优化过ListView。(默默吐槽一句现在不都用recycleView了么：listView只有View创建、ViewHolder的使用。)
                  接着让讲RecycleView的优化。其实正常使用本身没啥槽点，不然早让官方优化掉了。主要是不同业务下 最好使用合理的配置。
                  甚至我怀疑面我的哥们现在写列表还用listView。。。

    二面 是技术经理。首先有明确我面试结果。一面过。然后给我吹了一波团队 985 211 之类的人挺多 基本都是4年工作经验以及以上巴拉巴拉的
                1、第一个正式问的问题是 高考考了多少分。当年一本线多少分。(这是要干嘛)
                2、面向对象了解么(嗯 了解的)
                   那讲讲 重写 重载的区别。（重写是继承 自己实现方法。重载是同一个方法名，参数类型不同或者参数个数不同）
                   那讲讲 为什么重载不可以判断返回参数不同。（编译不过啊，编译机不能根据返回值推断）
                   接着追问 编译原理你们学过么。（学过啊，然后呢，这还得扯到编译原理嘛。这我不知道怎么答了）
                3、接下来是哪些方法不能被重写。 (一共四种 private default protect public，前两种 不能被重写，后两种能被重写)
                   接着问 那还有什么不能被重写的么。 （final 修饰的类。）还有么，卒。

                4、为什么重写 权限修饰符 只能扩大 能缩小么(不能；因为多态调用需要这样使用)

                5、算法题 反转字符串。（逆向遍历 append到stringBuilder）

至此结束。之后是对我的总结性发言 代码写的挺规范 挺细节(因为给StringBuilder设置了初始容量) 单又说感觉最近出来面试 准备不是特别充分啊之类的。 接着是跟他们职位匹配度有但也有差异的部分。再比对比对。
呵，这他么招个一线工作人员，工作好几年了的兄弟 还得看高考分数？ 还得把编译原理 计算机网络 数据结构 操作系统 课程全过一遍么？


掌阅
    有笔试，很细节；细节到需要你写具体方法名的。比如http断点续传需要什么参数。 手写 downLoad图片 一直到保存文件名 全流程。

    1、简介过程中介绍 MVVM 、插件化。
    2、View绘制流程。
    接着是具体的问题。
        1、空Act rootView 是 frameLayout 全屏。在内部 View （match，wrap）这时候 View的高度是多少。讲讲measure的过程。
            哇 我垮跨一顿扯 结果没点到核心点 measureSpec.
        2、自定义一个ViewGroup实现，20Dp的View 点击后；做动画滑动展开成 20dp+100Dp的目标View。
            （方案很多，简单讲了3个。1悬浮 不用撑开布局的话 直接执行属性动画2、撑开布局的话 修改父布局高度(父布局是相对或者frame)。）
           问题打补丁了，父布局LearnLayout的话要让下面的View实现 自我滑动收缩的效果 怎么做。（onLayout）
           还有别的么，（抱歉没想到）
           可以通过修改View的padding 左上右下，之类的都能做。（。。。不是能不能 是猛的思路不会这么拐弯 他知道能是因为笔试上有类似的题。哪些方法可以使得View移动。）
        2、插入 自定义View的坐标系。
           怎么改变坐标系原点。（坐标变换）
        3、HandlerThread 跟Thread的区别。基本过。
           注意构造参数。 HandlerThread（"name"） Handler(Looper looper)

        4、设计模式。自选 简单的不要 后指明要builder模式。
           Glide 是否是责任链设计模式。
        5、HashMap源码。

这场感受，太抠细节了。 不仅得会用，还得点到细节原理点才行。甚至要细节到大概方法名。


一整天走下来，总结就是横看成岭侧成峰。什么样的问题都有 不一而足。 总归是细节点掌控不够。需要加强。


2019-11-20 時間節點 從開始到現在第五周。京東+OPAY。目前京東3輪面完，opay 前後見了4位面試。
    总体感受：戏里戏外，各种意外。上午3面个人聊的都还可以，一直到12点。结果讲Hr不在，让等通知。
    昆仑万维则给人的感觉是 除开前台的水。其他哪个环节都不太如人意。 从Hr到第一位技术面 等大概十几分钟左右。
    接电话离开，换人来面。简单聊了下 网络+数据结构。又让等会儿 说是还让原来的人来面；然后跑走 一二十分钟，
    换来第三位技术面，年级三四十岁；除开项目上的一些描述外；还有两个具体的应用层问题，后面聊到 之后还得 VP+HR.让等VP
    大概等了接近三十分钟。VP 来了首先吐槽我的口音；然后项目，什么成长,展望之类的。至始至终 没人问一句是不是有啥想了解的。
    没人给介绍项目，团队。技术也不深入。总结：要么 不尊重自己的饭碗。要么 没打算招人。

京東。
    1.弱网下长链接 保持方案。
    2.okhttp的重连机制、拦截器、线程池（3个，请求线程池、清理线程，缓存整理线程）。(PS:[流程图](https://www.jianshu.com/p/9deec36f2759))
    3.图片选型（Glide、Fresco的优缺点）
    4.启动模式。
    5、跨进程通讯几种方式。
    6、广播的底层原理。（PS：原理是使用观察者模式。1、receiver通过Binder机制向AMS注册。2、发送者binder向AMS发送广播。3、分发）
    7、事件传递。事件传递过程中Activity的作用。（2019-12-29 这个答案有点问题。WindowManagerService --> inputMonitor-->inputManagerService。最后将IMS 跟 phoneWindow 绑定。
                                                 需要讲到activity-->window-->PhoneWindow(docketView ->rootViewImpl)-->WindowManagerGlobal-->IPC-->WindowManagerService...->surfaceflinger）
    8、sp支持类型。（基本类型+String）
    9、MVP、MVVM的差异化。（注意点ViewModelProviders.of(this).get(ViewModel.class)）
    10、Https。 怎么校验证书（1、client 发出 随机数+支持的加密算法。2、server发出随机数+一种客户端加密算法+证书+非对称加密的公钥。3、客户端验证证书。新的随机数，通过公钥+加密方案传过去。4、服务端解密 利用前三个随机数 生成对称加密的key）
    11、热修复。(Tinker方案:通过反射，获取到系统ClassLoader的dexElements数组，并把需要修改的dex文件插入到了数组当中的最前端).
    12、历史疑难问题怎么解决.(问题描述->找出原因;现状分析->解决方案;)
    13、三十万数据排序，安全以及效率兼顾用啥(归并：读取次数少+稳定。快排：内存少)。其他排序算法的特点。

    二、
    1、MVVM；链式编程的思想。（函数式编程，期望是当一个对象调用完一个函数之后返回自身，接着可以继续调用这个函数或者对象中定义的其他函数。）
    2、组件化。
    3、RN、flutter。
    三、
    1、长连接。
    2、项目周期、管理。
    3、okhttp.socket连接池的实现。
    4、跨平台。
    5、Android Q适配。
    6、线上崩溃率(0.15%)

昆仑万维
    一、
    1、kotlin 静态方法、单例的实现。
    2、ImageView 定义三角形头像。（canvas 裁剪 clipXXX()、XFrame 重叠区域的绘制。）
    一点五、
    1、TCP/Ip.5层协议(硬件、链路、IP、协议(TCP/Udp)、应用层)。
    2、IP层的作用。Https的4次认证，证书怎么校验。(证书通过签发机构+签发的URL)
    2.1、对称加密算法、非对称加密算法有哪些。（AES对称。RSA非对称。）
    3、数组、链表、树等数据结构的特点。
    4、LiveData 怎么反注册。（LifecycleOwner 注册监听者。onStateChanged remove）
    二、
    1、长连接。
    2、启动优化方案。
    3、列表页面，统计固定条目出现在屏幕的次数。（当前是面到第三个人了。。这些问题怕不是逗人玩呢吧）方案通过View的onDetachedFromWindow。onAttachedToWindow
    4、自定义View画圆环。
    三、
    1、吐槽我口音
    2、吐槽我学校
    3、项目功能、结构。
    4、打过包吗？混淆过吗？
    5、最有收获的阶段。
再次吐槽这家单位。全程没一个人去主动给我介绍下项目岗位职责人员配置相关。且没有给留任何互相了解的机会。



2019-11-28 第不知道几周。今年下午一点半。先说感受，瘦死的骆驼比马大，以为是驾校一卡通小应用，被58收了。以为是应用层+原理层。谁知道翻车了

58学车
    一、
        1、Handler的内存泄漏，怎么解决；
        2、内存泄漏的原理。
        3、怎么组件化改造，完成组件化有哪些标准；
        4、aRouter的原理；
        5、http缓存，碰见304情况下 端上的流程是怎样的；
        6、Thread的运行状态有几种、分别是？

    答：1/2、内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间。对Android（Java）平台，内存泄漏是指没有用的对象资源仍与GC-Root保持可达路径，导致系统无法进行回收。
            Handler内存泄漏的原因 内部类，强引用外部对象。 解决：1)静态内部类，弱引用外部对象. or 2)适当的时机removeAllCallbackMessage();
            常见泄漏场景：单例、非静态内部类、handler、线程、资源未关闭等
        3、组件化的思考：1)分层:基础组件、基础UI、日志；  中间件：控制层； 业务层：业务功能间相对独立、业务与实现的分离；避免强依赖 解耦。
        4、ARouter 通过APT技术在编译期间将注解的四大组件class文件添加到自己中，完成key-value的映射。拦截器 完成AOP 切面编程思想；
        5、http缓存 客户端上通过header里面相关字段完成；缓存保留 URL、请求类型、respondBody等内容到文件。
           协议缓存的流程为：
            到缓存请求缓存资源的标识信息-->缓存返回标识-->携带资源信息到服务端对比是否可用
            -->返回可用信号：304 not modified-->客户端再次请求缓存数据-->返回缓存内容。
        OR  -->服务端发现资源已修改-->返回新的资源与标识。-->缓存相应结果。

        6、总共6个状态，分别为：NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED。6个状态。


字节

    一面
        1、消息总线、以及LiveData源码、粘性消息相关。 (对消息可以统一包装，在里面加个参数判断是否需要粘性消息。需要自己实现是否粘性)
        2、HttpDNS相关 策略、更新策略、切换策略等。
        3、应用主体框架。组件化、字符串定义消息总线 是否存在同步问题等；目前model拆分优化。
        4、gradle 插件，提供AAR服务 以及相关的lib剔除功能。 task执行流程。
        5、插件化 droibPlugin 原理。插桩 hook等原理。
        6、疑难问题。
        7、技术上挑战性的问题。

        Java
        1、强弱软虚引用。
        2、内部类、匿名内部类、静态内部类相关。
        3、Handler机制 消息。
        4、触摸事件分发 inputManagerService。拦截响应机制。
        5、测量。 requestLayout后，刷新View的时候 重绘全屏吗？
        6、Java 虚拟机。类加载。
        7、并发，AQS CAS 偏向锁，自旋锁等。

        算法：
        1、返回单链表的环入口节点。


