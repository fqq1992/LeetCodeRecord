1、数组内存结构、二维数组内存结构。
    数组引用变量是存在在栈内存（stack）里；数组元素则存在堆内存中。

    数组本身是连续的内存地址，方便CRUD.
    多维数组也同样。行内存连续，但是里面元素存的为引用类型。

2、集合Collection
    Collection接口继承Iterable; 子类 List、Set; Map不是Collection的子类。
    List, ArrayList 非线程安全，线程安全替代类 Vector。扩容是 X*1.5+1. Vector扩容2倍。底层是个Obj[]数组。

          LinkedList  双向链式线性表，非线程安全。内部 Node<T>实现。

    Set，  无序、不得重复的集合。 由equal+HashCode决定.  HashSet,LinkedHashSet和TreeSet。
           HashSet底层由HashMap实现。LinkedHashSet由 LinkedHashMap实现。

    Map，  Map接口不直接继承于Collection接口（需要注意啦）。HashMap、LinkedHashMap等，均线程不安全。

          HashMap 底层是一个Node<K,V>[]数组，其中Node(hash(key),key,value,Next)链表。
                  位置由hash值决定，同一个hash位置上的node则组成链表。
                  允许null当key.

          LinkedHashMap与HashMap的不同之处在于，LinkedHashMap维护者运行于所有条目的双重链接列表，此链接列表可以是插入顺序或者访问顺序

          WeakHashMap的特点：WeakHashMap是一种改进的HashMap，它对key实行“弱引用”，如果一个key不再被外部所引用，那么该key可以被GC回收。

          IdentityHashMap特点：允许值key值一致。通过“==”判断对象的引用地址来判断。内部通过数组保存，偶数2n为Key,奇数2n+1为values。hash冲突时候 通过nextKeyIndex（）来解决。往后移动2个单位。
                               remove的时候 1、查找引用相等的；找到之后 2、删除该元素 3、后，需要把原来有冲突往后移的元素移到前面来.

    通过Collections.synchronizedMap（map）可以完成对线程同步map的创建。 内部是装饰者设计模式，在get、put、removed方法的地方加入锁。


-——————

        HashSet (java.util)
        SortedSet (java.util)
        AbstractSet (java.util)
        KeySetView in ConcurrentHashMap (java.util.concurrent)
        LinkedHashSet (java.util)
