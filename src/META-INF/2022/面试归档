理想汽车：
一轮3人 短期内 精力整体偏业务补齐
第一人
1、RN引擎类型有哪些，优缺点调研；
  Hermes 、JSC、V8等。
2、白屏监控怎么做。白屏了怎么办
3、异常上报怎么做。怎么友好提示
4、RN离线包图片方案怎么做。
5、网络优化环节。
6、okhttp的缓存策略（答得的一般）
   答：内容写在本地，可以由server在header里配置缓存时间；也可以强制缓存，通过intercept重写header。
   GET请求会如果本地有缓存会携带上次资源的Last Modified，到server 返回304则表示资源维修改。直接使用。

7、快手卡顿监控方案。koom。（没看，只聊了loop可以获取执行耗时。)
8、多bundle管理下遇到比较印象深刻的问题。
第二人
1、网络优化怎么取消页面请求。（可以更细致的讲下，okhttp的队列
2、block队列你用过哪些（没答上来，不是特别清楚
   BlockingQueue
3、离线包下载监控指标建设
4、引擎的销毁重建方案怎去做，
5、组件化直接的通信怎么做（接口下沉、消息总线
6、ks拆分module的思想
7、MVVM的思想，DataBinding的实现怎么做的。
    DataBinding的坑。编辑期间生成辅助类，隐藏具体观察者的实现，没有对layout中的写法做语法校验。出现问题是排查困难。 生成类的class数以及方法数较多，影响执行的效能。

第三人
1、ks动态化方案有哪些，
2、设计题 设计个基础的组件 分享模块。（答得不太好。设计题 一定要多白扯，多问，多沟通。条件越多，越明确。）
  （首先明确边界，是对内的 还是对外的，对内的是谁来维护。允不允许动态改变）
    然后 用户分为两部分，1、SDK方。2、业务使用方。
    针对分享功能做一个抽象， platformConfig（平台、图标、校验参数等）对维护者提供register的接口，通过server配置下发打开哪些。
    针对使用方，暴露3个接口 getSupportPlatform（） showShareView（）excuteShare（platform）
3、对客户端未来方向的看法。

有什么想问的。
1、业务方向。2、团队组成；3、之后的定位

理想汽车二面
讲下你项目上做的

HR面: 2022-1-20 08:55:38 待记录完善//


面试反馈：个人项目经验跟团队技术栈比较匹配，面试沟通也相对聚焦；期望可以把自己的经验在更多的业务场景落地，跟随团队丰富完善公司基建，共同进步，互相成就。
期望：20% 60w/年 base部分多一些。
如果碰到薪资当场给到直接入职的情况，怎么回答
  现在期望20%，可以给到的哈 期望现场再去跟述职的leader当场沟通下。




知乎：一面
1、kotlin的优缺点。
2、Java kotlin泛型 协变逆变
3、Java 8 lambda表达式跟kotlin的区别
4、kotlin 静态变量的区别。
5、网络调优具体哪些； http 1.1 跟http2.0的区别；以及http3.0的情况
6、HTTPS的安全校验流程
7、事件分发（待确定 争议点：IMS到WMS之后，是 ViewRootImpl->decorView-> View  activity中间的在那个阶段）
    activity在dockerView中被分发。window.Callback
8、在activity、fragment里怎么获取View的宽高。 View.post跟Handle.POST()的区别(重点)
    重点区别在。View.POST在 attachWindow之前 会把runnable存到HandlerActionQueue中，在draw之后再调用。 handle.post则直接发送msg
9、同步消息跟异步消息的差别。
10、路由设计怎么做，中间想做拦截的话 怎么搞。 navigation组件的优缺点。
    router可以直接面向切面变成，抽离回调出来；intercept。
    navigation：主要用作fragment的切换使用。返回会重新创建，隐藏API的实现。
11、跨组件通信怎么做。
12、flutter的一些现状。

二面：//TODO Android 15人，会员、消费、富文本编辑，电商相关
flutter的冷启优化怎么做
flutter的帧率优化怎么做
MVVM、MVP、MVI的区别及优缺点。
内存泄漏的检测方案；
JVM的线程模型；synchronized的特点，Atomic的原理，CAS的比较方法；生产消费者模型怎么实现，能现场实现一下嘛。
属性动画改的属性是哪个，measure时的两个参数分别代表什么意思；移动一个View可以改动那些属性来达成。
    属性动画原理（https://www.cnblogs.com/dasusu/p/8595422.html） View移动效果可改变的属性（https://www.jianshu.com/p/554cb268c091）
类RN方案跟flutter方案的对比及优缺点；后续怎么演进。

三面：// 开放类问题（个人感觉答得不太好
1、新技术栈的学习方法及流程。
2、当你与技术同学发生争执时，怎么对接处理；非技术同学怎么对接处理。（情景：当产品不信任你技术方案时，怎么做呢）
3、设计模式的日常使用有哪些，用他们解决了什么问题。
4、线程在系统中是怎么运行的。
5、线程池的设计，核心线程 临时线程的分配；
    线程池（https://blog.csdn.net/weixin_43778179/article/details/93750558）
6、你遇到过的比较困难的问题，大都是怎么解决的呢？
7、topN问题，快排怎么优化（5000 取前500）
8、闪光点。

结束。




行业感兴趣，落地交付可以；

个人绩效B+，但这块团队整体人数现在有些多，自己做的事情相对比较集中聚焦；我个人是比较希望在这个阶段接触 承担更多的事情的，
然后这块也认为年底年初是个不错的窗口期；这边就找老板要了一个名额 基本等价于年终提前发了。

绩效跟个人有关：能力、意愿度、勤奋度；也跟团队是否在做核心事情， 交付能力。期望跟随优秀的团队和老大。


白马出行
一面：
1、Glide的缓存机制。
2、打包的全流程，混淆是在哪个阶段；签名的根本作用。
    打包的流程：打包资源文件，生成R.java文件-> 处理aidl文件，生成相应的Java文件 -> 编译项目源代码，生成class文件 -> 转换所有的class文件，生成classes.dex文件 -> 打包生成APK文件-> 对APK文件进行签名 -> 对签名后的APK文件进行对齐处理
    字节对齐的优点：4字节整数倍，这样通过内存映射访问apk文件时的速度会更快。对齐的作用就是减少运行时内存的使用。
    混淆的阶段，dex之前。
    签名的作用：包名+签名 唯一标识，防止别人篡改。
3、RxJava的线程切换原理，Handle通信机制；BlockQueue的源码，怎么实现BlockQueue，sleep wait notify分别是谁的方法。
4、内存优化都有哪些；ArraySparseMap跟HashMap的优缺点对比。
5、怎么快速统计点击事件。字节码插桩，具体怎么做呢，在编译的哪个阶段做呢；
    AOP 字节码插桩。具体方案：Dexposed，Xposed等（运行时）aspactJ； 时机只能在JavaC之后 dex之前；
6、依赖注入生成Java代码怎么做，在哪个阶段。都有哪些方案。
    APT方案。主要依赖 apt-annotation、auto-service、apt-library。
6.1、你们的增量包更新是怎么做的。
7、webView了解么
逻辑题：1000 10个信封，组合出来。

技术栈：js->native； 大前端：50-60 客户端7，基础能力支撑。

快看漫画
一面：
1、flutter、RN的优缺点对比
2、flutter的消息机制，通讯机制；
3、如果一个项目从0到1切换到跨平台方案需要有哪些提前考虑的；
4、线程相关，RxJava原理部分，zip操作符的原理； 任务管理机制 怎么依赖串行回调
5、冷启动优化，简略方案。快手怎么做initModule的。
    线程：任务调度。taskA依赖taskB
6、内存泄漏常发生的点；
7、布局优化需要考虑哪些因素，相对布局跟线性布局的对比 以及最新的ConstraintLayout对比；
8、ViewStub的原理
    measure是宽高都为0、draw 为null实现。（https://blog.csdn.net/weixin_33681778/article/details/91394732）
9、权限管理怎么实现；
10、数据持久化都有哪些方案，优劣对比； room的缺点；SP文件需要注意的点；
11、组件化需要注意的点
    路由、通信。
备注：整体较为乐观，当场约二面时间。

二面： //TODO 踏马 真的卷。
1、RN、flutter各自的特点及落地情况。
    flutter预热引擎内存占用大概在40-50MB，2.0之后多实例变成了几百k
2、RN的一个生命周期。（JS
3、bridge的通信原理；webview注册bridge的安全问题做了哪些工作；
4、如果你设计一个bridge的框架怎么设计。

5、jni 两种注册方式分别是哪些
    静态注册、动态注册
6、AMS的启动流程;
7、进程的几种创建方式；fork返回值都有哪些 啥含义；线程跟进程的区别，数据结构上有差异吗？
    fork进程返回值，父进程中返回pid,子进程中返回0；失败则返回-1；
    进程是操作系统分配的资源基本单元，线程是可执行代码；一对多的关系。 JVM这块的话内存结构 栈、堆、方法区、常量池、计数器
    数据结构上的差异，
8、数据持久化有哪些；SP的commit apply的区别； MMKV进程安全么，怎么做的锁；，mmap怎么做到的内存信息脱离应用生命周期
    apply是异步，commit有返回结果是同步。
9、IMS的事件分发流程；onTouchListener对onTouch的影响；Btn在事件传递上跟TextView的差异。

10、线程怎么做到的不阻塞，epoll跟select的区别。
11、网络优化okhttp都有做哪些工作；测速方式用的啥； 不同的okhttp client可以复用同socket么。




拼多多
一面：
handle机制。（怎么反向找handle）
页面跳转的流程；
冷启APP流程，涉及到几个进程。
跨平台方案简介
内存泄漏主要有哪些常见场景
反转数字。

二面：
APP冷启的主要流程。
    进程跟JVM的对应关系。内存隔离 一对一。
JVM预案运行时数据区域。
    主要答一下：虚拟机栈、本地方法区、堆、方法区、常量池。
    跨线程共享主要是那部分。哪些是线程独有的，哪些是进程共享的。
    内存的碎片化怎么解决。
    GC的时候会暂停所有线程么。（会 stop the world

项目经验
    类RN方案都有几种，为啥不单线程。
    离线包的策略、离线包并发下载的策略、增量更新的收益（具体到成功率 跟时长
    容器相关指标的建设
    引擎方案的相关（基础包预热、业务包预热、复用、重建等）
    flutter的优缺点

背景介绍：客户端大概二十多个，Android儿/iOS儿大概 5：4。主要做短视频及直播相关业务方向。技术栈 native+自研跨平台方案。

三面：
  技术问题：主要是自己做的事情，遇到的困难，怎么解决；
非技术问题：
    对自己的一个评价“技术，非技术”
    后续的一个规划：带团队执行落地 还是技术
    看工作机会的原因
    换城市有什么困难么，这块是怎么的一个考虑
    职级情况 有股票嘛巴拉巴拉这些；





字节一面
1、设计模式
2、hashMap的put/get时间复杂度
    查找桶是O(1), 如果存在元素则有链表跟树的结构 这块分别是 O（n） O(log(n))的复杂度
3、viewModule的生命周期
4、livedata的高频操作会有影响吗

5、handle消息机制
6、RxJava线程调度
7、renderThread 渲染机制 5.0
8、flutter这边的渲染机制
9、flutter通信；手势传递情况；图片的内存占用-共享纹理方案原理；
    9.1 bitmap内存存在哪里（img-folder/bitmap_heap.jpg）
    对象的话 都在Java heap；像素对象 API10以下 放在native heap； API 11~25 放在Java heap； 26+ 放在native heap；

10、算法:有序链表合并；多条有序链表合并，多线程的话 怎么实现；
二面
1、Java的异常体系。
2、四大引用的作用跟对比
3、位图的内存占用
4、MVVM的理解
5、livedata的使用怎么，在viewModel里监听livedata
6、flutter几大版本的更新
7、多引擎方案的优劣 以及其使用的版本。
8、state 构参传递使用上有啥问题么；
9、难点问题
10、flt的性能优化
算法题 最大子串。

腾讯视频：
1、绘制流程；了解这个可以用在哪些性能排查上。
2、冷启流程；应用最早的时机是在哪里；
3、IMS跟WMS创建是在应用冷启的哪个节点。
4、图片库的一个对比 Glide & Fresco。
5、图片内存优化怎么做；
6、怎么防止图片内存抖动（bitmap的内存复用
7、类RN方案展示优化主要做了哪些；
代码题：实现一个单例
团队简介：整个团队大概29人，主要做腾讯视频TV版，系统主要是5.0-6.0  4.X也有一部分用户；技术栈native+hippy；主要在深圳，北京目前已入职1，再招聘1-2人。

美团：1面
1、KRN的分包你们做了哪些；业务包可以继续拆分嘛
2、引擎复用具体做了哪些工作
3、引擎的销毁重建方案
4、容器侧监控指标都有哪些
5、预热/性能提升有多大
6、混排方案具体情况，及数据
7、组件化怎么做，核心是路由跟信息传递
8、gradlePlugin写过么（无
9、setContentView后的主要流程

算法题：有序链表合并。
技术相关问题到此结束。
看机会的原因、职级、是否晋升、为啥没晋升、

2面。
1、职级，离职原因
2、是否晋升 为啥没晋升  薪酬  期望
3、项目随便讲讲吧。


58同城
1、4大组件、生命周期； service 多进程 application会初始化几次
2、synchronized 静态方法跟普通方法上的差异
3、循环引用怎么回收，GC 可达性分析
4、RN、flutter各自特点；长列表问题怎么解
5、异常上报怎么解决
6、异常率多少，native主要异常是哪些，OOM怎么定位排查；热修思路
    实现套路	    描述	                                                        代表
    底层替换方案	底层替换方案限制颇多，但时效性最好，加载轻快，立即见效	            阿里系的AndFix、Sophix
    类加载方案	类加载方案时效性差，需要重新冷启动才能见效，但修复范围广，限制少	    QZone超级补丁、微信Tinker

    Tinker  mergeDex classLoader方案，优点：兼容性 稳定性优；缺点：非及时生效
    Robust  参考：Instant Run，实现了对代码修改的实时生效（热插拔）。在方法插桩，即时生效。
    AndFix  native hook方案。优点：即时生效。 缺点：需要针对dalvik虚拟机和art虚拟机做适配，需要考虑指令集的兼容问题，需要native代码支持。

7、包大小问题怎么解决，都有哪些方案
    常见操作：1、无效资源删除，资源下发；2、无效代码删除；3、so动态库下发；4、混淆；
    非常见操作：1、动态化；2、函数内联（字节码修改；3、插件化
8、编译流程主要是哪些；渠道包怎么快速打 500个耗时如何
    编译流程上面有。
    渠道包问题：
    早期方案：
            之前的渠道包生成方案是通过在META-INF目录下添加空文件，用空文件的名称来作为渠道的唯一标识，之前在META-INF下添加文件是不需要重新签名应用的，这样会节省不少打包的时间，从而提高打渠道包的速度。但在新的应用签名方案下META-INF已经被列入了保护区了，向META-INF添加空文件的方案会对区块1、3、4都会有影响，新应用签名方案签署的应用经过我们旧的生成渠道包方案处理后，在安装时会报以下错误

    v2签名方案： 全文件进行签名的方案，能提供更快的应用安装时间、对未授权APK文件的更改提供更多保护。
                新的签名方案会在ZIP文件格式的 Central Directory 区块所在文件位置的前面添加一个APK Signing Block区块。https://tech.meituan.com/2017/01/13/android-apk-v2-signature-scheme.html
9、针对黑产、安全方面的主要做哪些工作。
团队情况 单端二十多个， 主业务招聘。 ToB 3个 ToC 1个目前


茄子快传
1、项目经历 RN、flutter等
    isolate啊，引擎效能啊等
2、基础 sync跟Lock的差异
synchronized与Lock的区别
    两者区别：
        1.首先synchronized是java内置关键字，在jvm层面，Lock是个java类；
        2.synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；
        3.synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；
        4.用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；
        5.synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）
        6.Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。


华兴证券
1、hashMap的原理。为啥链表换成红黑树；
   查询效率 O(n) -> O(logN) 另外是插入效率较高 插入密集型使用红黑树，查找密集型使用AVL树
2、并发安全的map有哪些方式；currentHashMap 怎么做的， 并发度是什么
    currentHashMap 大量使用volatile，final，CAS等lock-free技术来减少锁竞争对于性能的影响。 1.7的话 首先Segment 本身是锁 并发度16.
    1.8的话 放弃segment的结构，采用

3、反射机制优缺点； 怎么反射class对象实例，分别优缺点
    反射机制的优缺点：优点：提高了程序的灵活性和扩展性，降低模块的耦合性，提高自身的适应能力；缺点：耗时、安全性、健壮性。
    获取class对象实例：
    （1）class.forName()除了将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块。当然还可以指定是否执行静态块。
    （2）classLoader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。
4、序列化/反序列化什么时候使用， UUID的作用；parcelable为啥性能好，都有哪些优化对比Serializable
    UUID的作用，同UUID的才可以反序列化；写到本地的数据会携带uuid。
    parcelable性能，
        1、在内存的使用中,前者在性能方面要强于后者；以Ibinder作为信息载体的.在内存上的开销比较小
        2、Serializable反射性能消耗。
        3、在读写数据的时候,Parcelable是在内存中直接进行读写,而Serializable是通过使用IO流的形式将数据读写入在硬盘上。
        4、parcelable 不支持持久化
5、SP的源码。线程安全么 ，进程安全么； commit apply 区别；什么时候会写到文件
    SP线程安全，主要通过synchronized来操作。
6、Handle机制；ThreadLocal 怎么实现的，数据结构是啥，跟 hashMap的区别

7、recycleView的几级缓存 跟联动
8、三色球排序。


贝壳：
1、动态化大体流程介绍
2、客户端动态化都有哪些，RePlugin|AAB
3、flutter通信
4、flutter线程，跟客户端UI线程映射
5、组件化的思路。Arouter 怎么去做的合并，字节码操作有做过哪些
6、jetpack compose的现状。 协程及其设计思路。
7、SP的优缺点。ANR为啥会发生
    ANR发生节点：1、初始化时候 大文件的读写会block线程。2、ActivityThread 在handleActivityStop会调用 QueuedWork.waitToFinish().
    全量读写，版本号控制。
8、flutter包体积、异常上报
9、其他项目介绍。


欧科云链：
1、JVM的内存模型；数组对象是存在哪里的
1.1、GC算法都有哪些

2、线程安全，synchronized轻量级还是重量级，volatile能保证原子性嘛
3、sleep、await的区别。
4、线程池
5、HashMap相关，链表到红黑树是否会反转。怎么去做一个key的哈希冲突降频，怎么通过这个反找数组中的位置。
    拿到key的hash值 做前16位跟后16位的一个&， 之后拿到值跟当前数组长度去做一个（ n - 1 & hash）找到桶的位置。
6、HTTPS加密部分流程，为啥不全部使用非对称加密，随机数的作用
7、application、context、activity的继承关系，使用场景。
    继承关系的话 application跟 service一样，继承至ContextWrapper；activity继承至ContextThemeWrapper，有主题的概念。根本实现都是在 ContextImpl
    使用场景的话 跟UI相关的都适用 activity。

8、fragment参数传递怎么传，怎么跟activity数据共享。

9、setContentView后的一个流程。
10、事件分发。系统怎么识别长按事件。
    无onLongTouchEvent。只有onLongClick事件，在up